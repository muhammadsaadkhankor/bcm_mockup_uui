{"ast":null,"code":"// Simple calorie estimation service\nclass CalorieEstimationService {\n  // Simulate AI calorie estimation based on image analysis\n  estimateCalories(imageData) {\n    return new Promise(resolve => {\n      // Simulate processing time\n      setTimeout(() => {\n        // Mock calorie estimation (in real app, this would call AI service)\n        const estimatedCalories = Math.floor(Math.random() * 400) + 200; // 200-600 calories\n        const confidence = Math.floor(Math.random() * 30) + 70; // 70-100% confidence\n\n        const foodItems = this.generateFoodItems(estimatedCalories);\n        resolve({\n          totalCalories: estimatedCalories,\n          confidence: confidence,\n          foodItems: foodItems,\n          timestamp: new Date().toISOString()\n        });\n      }, 2000);\n    });\n  }\n  generateFoodItems(totalCalories) {\n    const foodDatabase = [{\n      name: 'Rice',\n      caloriesPerGram: 1.3\n    }, {\n      name: 'Chicken Breast',\n      caloriesPerGram: 1.65\n    }, {\n      name: 'Broccoli',\n      caloriesPerGram: 0.34\n    }, {\n      name: 'Pasta',\n      caloriesPerGram: 1.31\n    }, {\n      name: 'Salmon',\n      caloriesPerGram: 2.08\n    }, {\n      name: 'Bread',\n      caloriesPerGram: 2.65\n    }, {\n      name: 'Apple',\n      caloriesPerGram: 0.52\n    }, {\n      name: 'Cheese',\n      caloriesPerGram: 4.02\n    }];\n\n    // Randomly select 1-3 food items\n    const numItems = Math.floor(Math.random() * 3) + 1;\n    const selectedFoods = [];\n    const usedIndices = new Set();\n    let remainingCalories = totalCalories;\n    for (let i = 0; i < numItems; i++) {\n      let randomIndex;\n      do {\n        randomIndex = Math.floor(Math.random() * foodDatabase.length);\n      } while (usedIndices.has(randomIndex));\n      usedIndices.add(randomIndex);\n      const food = foodDatabase[randomIndex];\n\n      // Calculate portion for this item\n      const portionCalories = i === numItems - 1 ? remainingCalories : Math.floor(remainingCalories * (0.3 + Math.random() * 0.4));\n      const weight = Math.round(portionCalories / food.caloriesPerGram);\n      selectedFoods.push({\n        name: food.name,\n        calories: portionCalories,\n        weight: weight,\n        unit: 'g'\n      });\n      remainingCalories -= portionCalories;\n    }\n    return selectedFoods;\n  }\n}\nexport default new CalorieEstimationService();","map":{"version":3,"names":["CalorieEstimationService","estimateCalories","imageData","Promise","resolve","setTimeout","estimatedCalories","Math","floor","random","confidence","foodItems","generateFoodItems","totalCalories","timestamp","Date","toISOString","foodDatabase","name","caloriesPerGram","numItems","selectedFoods","usedIndices","Set","remainingCalories","i","randomIndex","length","has","add","food","portionCalories","weight","round","push","calories","unit"],"sources":["/home/saadkhankori/spm_proj_mockupUI/src/services/calorieEstimation.js"],"sourcesContent":["// Simple calorie estimation service\nclass CalorieEstimationService {\n  \n  // Simulate AI calorie estimation based on image analysis\n  estimateCalories(imageData) {\n    return new Promise((resolve) => {\n      // Simulate processing time\n      setTimeout(() => {\n        // Mock calorie estimation (in real app, this would call AI service)\n        const estimatedCalories = Math.floor(Math.random() * 400) + 200; // 200-600 calories\n        const confidence = Math.floor(Math.random() * 30) + 70; // 70-100% confidence\n        \n        const foodItems = this.generateFoodItems(estimatedCalories);\n        \n        resolve({\n          totalCalories: estimatedCalories,\n          confidence: confidence,\n          foodItems: foodItems,\n          timestamp: new Date().toISOString()\n        });\n      }, 2000);\n    });\n  }\n  \n  generateFoodItems(totalCalories) {\n    const foodDatabase = [\n      { name: 'Rice', caloriesPerGram: 1.3 },\n      { name: 'Chicken Breast', caloriesPerGram: 1.65 },\n      { name: 'Broccoli', caloriesPerGram: 0.34 },\n      { name: 'Pasta', caloriesPerGram: 1.31 },\n      { name: 'Salmon', caloriesPerGram: 2.08 },\n      { name: 'Bread', caloriesPerGram: 2.65 },\n      { name: 'Apple', caloriesPerGram: 0.52 },\n      { name: 'Cheese', caloriesPerGram: 4.02 }\n    ];\n    \n    // Randomly select 1-3 food items\n    const numItems = Math.floor(Math.random() * 3) + 1;\n    const selectedFoods = [];\n    const usedIndices = new Set();\n    \n    let remainingCalories = totalCalories;\n    \n    for (let i = 0; i < numItems; i++) {\n      let randomIndex;\n      do {\n        randomIndex = Math.floor(Math.random() * foodDatabase.length);\n      } while (usedIndices.has(randomIndex));\n      \n      usedIndices.add(randomIndex);\n      const food = foodDatabase[randomIndex];\n      \n      // Calculate portion for this item\n      const portionCalories = i === numItems - 1 ? \n        remainingCalories : \n        Math.floor(remainingCalories * (0.3 + Math.random() * 0.4));\n      \n      const weight = Math.round(portionCalories / food.caloriesPerGram);\n      \n      selectedFoods.push({\n        name: food.name,\n        calories: portionCalories,\n        weight: weight,\n        unit: 'g'\n      });\n      \n      remainingCalories -= portionCalories;\n    }\n    \n    return selectedFoods;\n  }\n}\n\nexport default new CalorieEstimationService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}