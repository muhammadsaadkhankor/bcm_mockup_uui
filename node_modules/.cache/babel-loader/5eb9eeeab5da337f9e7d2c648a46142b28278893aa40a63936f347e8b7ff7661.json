{"ast":null,"code":"// Simple local database simulation using localStorage\nclass Database {\n  constructor() {\n    this.users = this.getUsers();\n    this.meals = this.getMeals();\n  }\n\n  // User management\n  getUsers() {\n    const users = localStorage.getItem('bcm_users');\n    return users ? JSON.parse(users) : [];\n  }\n  saveUsers() {\n    localStorage.setItem('bcm_users', JSON.stringify(this.users));\n  }\n  createUser(userData) {\n    const existingUser = this.users.find(u => u.email === userData.email);\n    if (existingUser) {\n      throw new Error('User already exists with this email');\n    }\n    const newUser = {\n      id: Date.now().toString(),\n      name: userData.name,\n      email: userData.email,\n      password: userData.password,\n      // In real app, this would be hashed\n      phone: userData.phone || '',\n      createdAt: new Date().toISOString(),\n      lastLogin: new Date().toISOString()\n    };\n    this.users.push(newUser);\n    this.saveUsers();\n    return {\n      ...newUser,\n      password: undefined\n    }; // Don't return password\n  }\n  authenticateUser(email, password) {\n    const user = this.users.find(u => u.email === email && u.password === password);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Update last login\n    user.lastLogin = new Date().toISOString();\n    this.saveUsers();\n    return {\n      ...user,\n      password: undefined\n    }; // Don't return password\n  }\n  getUserById(id) {\n    const user = this.users.find(u => u.id === id);\n    return user ? {\n      ...user,\n      password: undefined\n    } : null;\n  }\n\n  // Meal management\n  getMeals() {\n    const meals = localStorage.getItem('bcm_meals');\n    return meals ? JSON.parse(meals) : {};\n  }\n  saveMeals() {\n    localStorage.setItem('bcm_meals', JSON.stringify(this.meals));\n  }\n  addMeal(userId, mealData) {\n    if (!this.meals[userId]) {\n      this.meals[userId] = [];\n    }\n    const meal = {\n      id: Date.now().toString(),\n      ...mealData,\n      timestamp: new Date().toISOString(),\n      date: new Date().toDateString()\n    };\n    this.meals[userId].push(meal);\n    this.saveMeals();\n    return meal;\n  }\n  getUserMeals(userId) {\n    return this.meals[userId] || [];\n  }\n  getTodaysMeals(userId) {\n    const today = new Date().toDateString();\n    const userMeals = this.getUserMeals(userId);\n    return userMeals.filter(meal => meal.date === today);\n  }\n}\nexport default new Database();","map":{"version":3,"names":["Database","constructor","users","getUsers","meals","getMeals","localStorage","getItem","JSON","parse","saveUsers","setItem","stringify","createUser","userData","existingUser","find","u","email","Error","newUser","id","Date","now","toString","name","password","phone","createdAt","toISOString","lastLogin","push","undefined","authenticateUser","user","getUserById","saveMeals","addMeal","userId","mealData","meal","timestamp","date","toDateString","getUserMeals","getTodaysMeals","today","userMeals","filter"],"sources":["/home/saadkhankori/spm_proj_mockupUI/src/services/database.js"],"sourcesContent":["// Simple local database simulation using localStorage\nclass Database {\n  constructor() {\n    this.users = this.getUsers();\n    this.meals = this.getMeals();\n  }\n\n  // User management\n  getUsers() {\n    const users = localStorage.getItem('bcm_users');\n    return users ? JSON.parse(users) : [];\n  }\n\n  saveUsers() {\n    localStorage.setItem('bcm_users', JSON.stringify(this.users));\n  }\n\n  createUser(userData) {\n    const existingUser = this.users.find(u => u.email === userData.email);\n    if (existingUser) {\n      throw new Error('User already exists with this email');\n    }\n\n    const newUser = {\n      id: Date.now().toString(),\n      name: userData.name,\n      email: userData.email,\n      password: userData.password, // In real app, this would be hashed\n      phone: userData.phone || '',\n      createdAt: new Date().toISOString(),\n      lastLogin: new Date().toISOString()\n    };\n\n    this.users.push(newUser);\n    this.saveUsers();\n    return { ...newUser, password: undefined }; // Don't return password\n  }\n\n  authenticateUser(email, password) {\n    const user = this.users.find(u => u.email === email && u.password === password);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Update last login\n    user.lastLogin = new Date().toISOString();\n    this.saveUsers();\n    \n    return { ...user, password: undefined }; // Don't return password\n  }\n\n  getUserById(id) {\n    const user = this.users.find(u => u.id === id);\n    return user ? { ...user, password: undefined } : null;\n  }\n\n  // Meal management\n  getMeals() {\n    const meals = localStorage.getItem('bcm_meals');\n    return meals ? JSON.parse(meals) : {};\n  }\n\n  saveMeals() {\n    localStorage.setItem('bcm_meals', JSON.stringify(this.meals));\n  }\n\n  addMeal(userId, mealData) {\n    if (!this.meals[userId]) {\n      this.meals[userId] = [];\n    }\n\n    const meal = {\n      id: Date.now().toString(),\n      ...mealData,\n      timestamp: new Date().toISOString(),\n      date: new Date().toDateString()\n    };\n\n    this.meals[userId].push(meal);\n    this.saveMeals();\n    return meal;\n  }\n\n  getUserMeals(userId) {\n    return this.meals[userId] || [];\n  }\n\n  getTodaysMeals(userId) {\n    const today = new Date().toDateString();\n    const userMeals = this.getUserMeals(userId);\n    return userMeals.filter(meal => meal.date === today);\n  }\n}\n\nexport default new Database();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}