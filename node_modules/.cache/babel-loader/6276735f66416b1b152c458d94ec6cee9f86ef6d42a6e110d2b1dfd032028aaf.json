{"ast":null,"code":"const initialUsers = [{\n  id: 1,\n  email: \"demo@bcm.com\",\n  password: \"demo123\",\n  name: \"Alex Johnson\",\n  phone: \"+1234567890\",\n  dailyGoal: 2000,\n  createdAt: \"2024-01-15\"\n}];\nclass AuthService {\n  constructor() {\n    this.users = JSON.parse(localStorage.getItem('bcm_users')) || initialUsers;\n  }\n  signIn(emailOrPhone, password) {\n    const user = this.users.find(u => (u.email === emailOrPhone || u.phone === emailOrPhone) && u.password === password);\n    if (user) {\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return {\n        success: true,\n        user\n      };\n    }\n    return {\n      success: false,\n      error: 'Invalid credentials'\n    };\n  }\n  createAccount(emailOrPhone, password, name) {\n    const isEmail = emailOrPhone.includes('@');\n    const isPhone = /^[+]?[0-9\\s\\-\\(\\)]+$/.test(emailOrPhone);\n    if (this.users.find(u => u.email === emailOrPhone || u.phone === emailOrPhone)) {\n      return {\n        success: false,\n        error: 'Email or phone already exists'\n      };\n    }\n    const newUser = {\n      id: this.users.length + 1,\n      email: isEmail ? emailOrPhone : '',\n      phone: isPhone ? emailOrPhone : '',\n      password,\n      name,\n      dailyGoal: 2000,\n      createdAt: new Date().toISOString().split('T')[0]\n    };\n    this.users.push(newUser);\n    localStorage.setItem('bcm_users', JSON.stringify(this.users));\n    localStorage.setItem('currentUser', JSON.stringify(newUser));\n    return {\n      success: true,\n      user: newUser\n    };\n  }\n  getCurrentUser() {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  }\n  signOut() {\n    localStorage.removeItem('currentUser');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["initialUsers","id","email","password","name","phone","dailyGoal","createdAt","AuthService","constructor","users","JSON","parse","localStorage","getItem","signIn","emailOrPhone","user","find","u","setItem","stringify","success","error","createAccount","isEmail","includes","isPhone","test","newUser","length","Date","toISOString","split","push","getCurrentUser","signOut","removeItem"],"sources":["/home/saadkhankori/spm_proj_mockupUI/src/services/auth.js"],"sourcesContent":["const initialUsers = [\n  {\n    id: 1,\n    email: \"demo@bcm.com\",\n    password: \"demo123\",\n    name: \"Alex Johnson\",\n    phone: \"+1234567890\",\n    dailyGoal: 2000,\n    createdAt: \"2024-01-15\"\n  }\n];\n\nclass AuthService {\n  constructor() {\n    this.users = JSON.parse(localStorage.getItem('bcm_users')) || initialUsers;\n  }\n\n  signIn(emailOrPhone, password) {\n    const user = this.users.find(u => \n      (u.email === emailOrPhone || u.phone === emailOrPhone) && u.password === password\n    );\n    if (user) {\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return { success: true, user };\n    }\n    return { success: false, error: 'Invalid credentials' };\n  }\n\n  createAccount(emailOrPhone, password, name) {\n    const isEmail = emailOrPhone.includes('@');\n    const isPhone = /^[+]?[0-9\\s\\-\\(\\)]+$/.test(emailOrPhone);\n    \n    if (this.users.find(u => u.email === emailOrPhone || u.phone === emailOrPhone)) {\n      return { success: false, error: 'Email or phone already exists' };\n    }\n    \n    const newUser = {\n      id: this.users.length + 1,\n      email: isEmail ? emailOrPhone : '',\n      phone: isPhone ? emailOrPhone : '',\n      password,\n      name,\n      dailyGoal: 2000,\n      createdAt: new Date().toISOString().split('T')[0]\n    };\n    \n    this.users.push(newUser);\n    localStorage.setItem('bcm_users', JSON.stringify(this.users));\n    localStorage.setItem('currentUser', JSON.stringify(newUser));\n    return { success: true, user: newUser };\n  }\n\n  getCurrentUser() {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  }\n\n  signOut() {\n    localStorage.removeItem('currentUser');\n  }\n}\n\nexport default new AuthService();"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,cAAc;EACrBC,QAAQ,EAAE,SAAS;EACnBC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE,aAAa;EACpBC,SAAS,EAAE,IAAI;EACfC,SAAS,EAAE;AACb,CAAC,CACF;AAED,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAId,YAAY;EAC5E;EAEAe,MAAMA,CAACC,YAAY,EAAEb,QAAQ,EAAE;IAC7B,MAAMc,IAAI,GAAG,IAAI,CAACP,KAAK,CAACQ,IAAI,CAACC,CAAC,IAC5B,CAACA,CAAC,CAACjB,KAAK,KAAKc,YAAY,IAAIG,CAAC,CAACd,KAAK,KAAKW,YAAY,KAAKG,CAAC,CAAChB,QAAQ,KAAKA,QAC3E,CAAC;IACD,IAAIc,IAAI,EAAE;MACRJ,YAAY,CAACO,OAAO,CAAC,aAAa,EAAET,IAAI,CAACU,SAAS,CAACJ,IAAI,CAAC,CAAC;MACzD,OAAO;QAAEK,OAAO,EAAE,IAAI;QAAEL;MAAK,CAAC;IAChC;IACA,OAAO;MAAEK,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAsB,CAAC;EACzD;EAEAC,aAAaA,CAACR,YAAY,EAAEb,QAAQ,EAAEC,IAAI,EAAE;IAC1C,MAAMqB,OAAO,GAAGT,YAAY,CAACU,QAAQ,CAAC,GAAG,CAAC;IAC1C,MAAMC,OAAO,GAAG,sBAAsB,CAACC,IAAI,CAACZ,YAAY,CAAC;IAEzD,IAAI,IAAI,CAACN,KAAK,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjB,KAAK,KAAKc,YAAY,IAAIG,CAAC,CAACd,KAAK,KAAKW,YAAY,CAAC,EAAE;MAC9E,OAAO;QAAEM,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAgC,CAAC;IACnE;IAEA,MAAMM,OAAO,GAAG;MACd5B,EAAE,EAAE,IAAI,CAACS,KAAK,CAACoB,MAAM,GAAG,CAAC;MACzB5B,KAAK,EAAEuB,OAAO,GAAGT,YAAY,GAAG,EAAE;MAClCX,KAAK,EAAEsB,OAAO,GAAGX,YAAY,GAAG,EAAE;MAClCb,QAAQ;MACRC,IAAI;MACJE,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE,IAAIwB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,IAAI,CAACvB,KAAK,CAACwB,IAAI,CAACL,OAAO,CAAC;IACxBhB,YAAY,CAACO,OAAO,CAAC,WAAW,EAAET,IAAI,CAACU,SAAS,CAAC,IAAI,CAACX,KAAK,CAAC,CAAC;IAC7DG,YAAY,CAACO,OAAO,CAAC,aAAa,EAAET,IAAI,CAACU,SAAS,CAACQ,OAAO,CAAC,CAAC;IAC5D,OAAO;MAAEP,OAAO,EAAE,IAAI;MAAEL,IAAI,EAAEY;IAAQ,CAAC;EACzC;EAEAM,cAAcA,CAAA,EAAG;IACf,MAAMlB,IAAI,GAAGJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAChD,OAAOG,IAAI,GAAGN,IAAI,CAACC,KAAK,CAACK,IAAI,CAAC,GAAG,IAAI;EACvC;EAEAmB,OAAOA,CAAA,EAAG;IACRvB,YAAY,CAACwB,UAAU,CAAC,aAAa,CAAC;EACxC;AACF;AAEA,eAAe,IAAI7B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}